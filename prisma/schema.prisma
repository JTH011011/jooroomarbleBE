generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SessionStatus {
  WAIT
  RUN
  PLAYING
  END
}

enum TileType {
  START
  DRINK
  CUSTOM
}

// ──────────────── 사용자 및 맵 설계 ────────────────

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  nickname   String
  created_at DateTime @default(now())

  maps     Map[]         @relation("UserMaps")
  sessions GameSession[] @relation("UserSessions")
}

model Guest {
  id         String   @id @default(uuid())
  nickname   String
  created_at DateTime @default(now())

  participants Participant[]
}

// ──────────────── 게임판 (맵) ────────────────

model Map {
  id         Int      @id @default(autoincrement())
  title      String
  is_builtin Boolean  @default(false)
  created_at DateTime @default(now())

  king    User? @relation("UserMaps", fields: [king_id], references: [id])
  king_id Int?

  tiles    MapTile[]
  sessions GameSession[]
}

model MapTile {
  id             Int         @id @default(autoincrement())
  map            Map         @relation(fields: [map_id], references: [id])
  map_id         Int
  idx            Int
  tile_type      TileType
  description    String?
  default_action Json?
  events         TileEvent[]

  @@unique([map_id, idx]) // 하나의 맵 내에서는 타일 순서가 유일해야 함
}

// ──────────────── 게임 세션 및 참여 ────────────────

model GameSession {
  id         Int           @id @default(autoincrement())
  join_code  String        @unique
  status     SessionStatus @default(WAIT)
  started_at DateTime?
  ended_at   DateTime?

  map     Map  @relation(fields: [map_id], references: [id])
  map_id  Int
  king    User @relation("UserSessions", fields: [king_id], references: [id])
  king_id Int

  max_players      Int
  current_pos      Int // 현재 플레이어의 위치 (0부터 시작)
  is_on_ladder     Boolean @default(false)
  ladder_remaining Int     @default(0) // 사다리 남은 횟수

  participants Participant[]
  turns        Turn[]
}

model Participant {
  id         Int         @id @default(autoincrement())
  session    GameSession @relation(fields: [session_id], references: [id], onDelete: Cascade)
  session_id Int

  guest    Guest  @relation(fields: [guest_id], references: [id])
  guest_id String

  join_order Int
  is_out     Boolean @default(false)

  turns Turn[]
}

// ──────────────── 턴 및 타일 이벤트 ────────────────

model Turn {
  id         Int         @id @default(autoincrement())
  session    GameSession @relation(fields: [session_id], references: [id], onDelete: Cascade)
  session_id Int

  participant    Participant @relation(fields: [participant_id], references: [id], onDelete: Cascade)
  participant_id Int

  turn_no     Int
  dice        Int // 1~6 주사위 값
  from_pos    Int
  to_pos      Int
  resolved_at DateTime?

  tile_events TileEvent[]
}

model TileEvent {
  id      Int  @id @default(autoincrement())
  turn    Turn @relation(fields: [turn_id], references: [id], onDelete: Cascade)
  turn_id Int

  tile    MapTile @relation(fields: [tile_id], references: [id])
  tile_id Int

  action_result Json
}
